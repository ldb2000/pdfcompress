#!/usr/bin/env python3
"""
Script de compression par lot pour PDF
Compresse tous les fichiers PDF d'un r√©pertoire
"""

import os
import sys
import argparse
import glob
from pathlib import Path
from compress_pdf import compress_pdf

def batch_compress(directory_path, output_dir=None, method='auto', compression_level='medium', pattern='*.pdf'):
    """
    Compresse tous les PDFs d'un r√©pertoire
    
    Args:
        directory_path (str): R√©pertoire contenant les PDFs
        output_dir (str): R√©pertoire de sortie (optionnel)
        method (str): M√©thode de compression
        compression_level (str): Niveau de compression
        pattern (str): Pattern de fichiers √† traiter
    """
    
    if not os.path.exists(directory_path):
        print(f"‚ùå Le r√©pertoire {directory_path} n'existe pas.")
        return False
    
    # Cr√©er le r√©pertoire de sortie si sp√©cifi√©
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)
    
    # Trouver tous les fichiers PDF
    search_pattern = os.path.join(directory_path, pattern)
    pdf_files = glob.glob(search_pattern)
    
    if not pdf_files:
        print(f"‚ùå Aucun fichier PDF trouv√© dans {directory_path}")
        return False
    
    print(f"üìÅ R√©pertoire: {directory_path}")
    print(f"üìÑ {len(pdf_files)} fichier(s) PDF trouv√©(s)")
    print(f"üîß M√©thode: {method}, Niveau: {compression_level}")
    print("=" * 50)
    
    total_original = 0
    total_compressed = 0
    success_count = 0
    
    for i, pdf_file in enumerate(pdf_files, 1):
        print(f"\n[{i}/{len(pdf_files)}] {os.path.basename(pdf_file)}")
        print("-" * 30)
        
        # D√©terminer le fichier de sortie
        if output_dir:
            output_file = os.path.join(output_dir, os.path.basename(pdf_file))
        else:
            input_path = Path(pdf_file)
            output_file = str(input_path.parent / f"{input_path.stem}_compressed{input_path.suffix}")
        
        # Obtenir la taille originale
        original_size = os.path.getsize(pdf_file) / (1024 * 1024)
        total_original += original_size
        
        # Comprimer le fichier
        if compress_pdf(pdf_file, output_file, method, compression_level):
            if os.path.exists(output_file):
                compressed_size = os.path.getsize(output_file) / (1024 * 1024)
                total_compressed += compressed_size
                success_count += 1
            else:
                total_compressed += original_size
        else:
            total_compressed += original_size
    
    # Statistiques finales
    print("\n" + "=" * 50)
    print("üìä STATISTIQUES FINALES")
    print("=" * 50)
    print(f"‚úÖ Fichiers trait√©s avec succ√®s: {success_count}/{len(pdf_files)}")
    print(f"üìè Taille totale originale: {total_original:.2f} Mo")
    print(f"üìè Taille totale compress√©e: {total_compressed:.2f} Mo")
    
    if total_original > 0:
        total_reduction = ((total_original - total_compressed) / total_original) * 100
        print(f"üíæ R√©duction totale: {total_reduction:.1f}%")
        print(f"üíæ Espace √©conomis√©: {total_original - total_compressed:.2f} Mo")
    
    return success_count > 0

def main():
    parser = argparse.ArgumentParser(description="Compression par lot de fichiers PDF")
    parser.add_argument("directory", help="R√©pertoire contenant les fichiers PDF")
    parser.add_argument("-o", "--output", help="R√©pertoire de sortie (optionnel)")
    parser.add_argument("-m", "--method", choices=['auto', 'pikepdf', 'fitz', 'pypdf'], 
                       default='auto', help="M√©thode de compression (d√©faut: auto)")
    parser.add_argument("-l", "--level", choices=['low', 'medium', 'high'], 
                       default='medium', help="Niveau de compression (d√©faut: medium)")
    parser.add_argument("-p", "--pattern", default='*.pdf', 
                       help="Pattern de fichiers √† traiter (d√©faut: *.pdf)")
    
    args = parser.parse_args()
    
    print("üîÑ COMPRESSION PAR LOT - PDF COMPRESSOR")
    print("=" * 50)
    
    success = batch_compress(
        args.directory, 
        args.output, 
        args.method, 
        args.level, 
        args.pattern
    )
    
    if not success:
        print("\nüí° Conseils:")
        print("   - V√©rifiez que le r√©pertoire contient des fichiers PDF")
        print("   - Assurez-vous que les d√©pendances sont install√©es")
        print("   pip install pikepdf PyMuPDF PyPDF2")
        sys.exit(1)

if __name__ == "__main__":
    main()
